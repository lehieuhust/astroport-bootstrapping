/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, Uint128, Config, Cw20HookMsg, ExecuteMsg, Binary, Decimal, CallbackMsg, AssetInfo, Cw20ReceiveMsg, UpdateConfigMsg, Asset, InstantiateMsg, RestrictedVectorForAssetInfoAndUint128, LockUpInfoResponse, MigrateMsg, RestrictedVectorForAssetInfoAndDecimal, Uint256, PoolInfo, MigrationInfo, QueryMsg, StateResponse, UserInfoResponse } from "./Lockdrop.types";
export interface LockdropReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  state: () => Promise<StateResponse>;
  pool: ({
    terraswapLpToken
  }: {
    terraswapLpToken: string;
  }) => Promise<PoolResponse>;
  userInfo: ({
    address
  }: {
    address: string;
  }) => Promise<UserInfoResponse>;
  userInfoWithLockupsList: ({
    address
  }: {
    address: string;
  }) => Promise<UserInfoWithLockupsListResponse>;
  lockUpInfo: ({
    duration,
    terraswapLpToken,
    userAddress
  }: {
    duration: number;
    terraswapLpToken: string;
    userAddress: string;
  }) => Promise<LockUpInfoResponse>;
  pendingAssetReward: ({
    duration,
    terraswapLpToken,
    userAddress
  }: {
    duration: number;
    terraswapLpToken: string;
    userAddress: string;
  }) => Promise<PendingAssetRewardResponse>;
}
export class LockdropQueryClient implements LockdropReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.state = this.state.bind(this);
    this.pool = this.pool.bind(this);
    this.userInfo = this.userInfo.bind(this);
    this.userInfoWithLockupsList = this.userInfoWithLockupsList.bind(this);
    this.lockUpInfo = this.lockUpInfo.bind(this);
    this.pendingAssetReward = this.pendingAssetReward.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  state = async (): Promise<StateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      state: {}
    });
  };
  pool = async ({
    terraswapLpToken
  }: {
    terraswapLpToken: string;
  }): Promise<PoolResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pool: {
        terraswap_lp_token: terraswapLpToken
      }
    });
  };
  userInfo = async ({
    address
  }: {
    address: string;
  }): Promise<UserInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      user_info: {
        address
      }
    });
  };
  userInfoWithLockupsList = async ({
    address
  }: {
    address: string;
  }): Promise<UserInfoWithLockupsListResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      user_info_with_lockups_list: {
        address
      }
    });
  };
  lockUpInfo = async ({
    duration,
    terraswapLpToken,
    userAddress
  }: {
    duration: number;
    terraswapLpToken: string;
    userAddress: string;
  }): Promise<LockUpInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      lock_up_info: {
        duration,
        terraswap_lp_token: terraswapLpToken,
        user_address: userAddress
      }
    });
  };
  pendingAssetReward = async ({
    duration,
    terraswapLpToken,
    userAddress
  }: {
    duration: number;
    terraswapLpToken: string;
    userAddress: string;
  }): Promise<PendingAssetRewardResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pending_asset_reward: {
        duration,
        terraswap_lp_token: terraswapLpToken,
        user_address: userAddress
      }
    });
  };
}
export interface LockdropInterface extends LockdropReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    newConfig
  }: {
    newConfig: UpdateConfigMsg;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  enableClaims: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  initializePool: ({
    incentivesShare,
    terraswapLpToken
  }: {
    incentivesShare: number;
    terraswapLpToken: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updatePool: ({
    incentivesShare,
    terraswapLpToken
  }: {
    incentivesShare: number;
    terraswapLpToken: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdrawFromLockup: ({
    amount,
    duration,
    terraswapLpToken
  }: {
    amount: Uint128;
    duration: number;
    terraswapLpToken: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  migrateLiquidity: ({
    astroportPoolAddr,
    slippageTolerance,
    terraswapLpToken
  }: {
    astroportPoolAddr: string;
    slippageTolerance?: Decimal;
    terraswapLpToken: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  stakeLpTokens: ({
    terraswapLpToken
  }: {
    terraswapLpToken: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  delegateAstroToAuction: ({
    amount
  }: {
    amount: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claimRewardsAndOptionallyUnlock: ({
    duration,
    terraswapLpToken,
    withdrawLpStake
  }: {
    duration: number;
    terraswapLpToken: string;
    withdrawLpStake: boolean;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claimAssetReward: ({
    duration,
    recipient,
    terraswapLpToken
  }: {
    duration: number;
    recipient?: string;
    terraswapLpToken: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  togglePoolRewards: ({
    enable,
    terraswapLpToken
  }: {
    enable: boolean;
    terraswapLpToken: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  callback: (callbackMsg: CallbackMsg, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  proposeNewOwner: ({
    expiresIn,
    owner
  }: {
    expiresIn: number;
    owner: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  dropOwnershipProposal: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claimOwnership: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class LockdropClient extends LockdropQueryClient implements LockdropInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.enableClaims = this.enableClaims.bind(this);
    this.initializePool = this.initializePool.bind(this);
    this.updatePool = this.updatePool.bind(this);
    this.withdrawFromLockup = this.withdrawFromLockup.bind(this);
    this.migrateLiquidity = this.migrateLiquidity.bind(this);
    this.stakeLpTokens = this.stakeLpTokens.bind(this);
    this.delegateAstroToAuction = this.delegateAstroToAuction.bind(this);
    this.claimRewardsAndOptionallyUnlock = this.claimRewardsAndOptionallyUnlock.bind(this);
    this.claimAssetReward = this.claimAssetReward.bind(this);
    this.togglePoolRewards = this.togglePoolRewards.bind(this);
    this.callback = this.callback.bind(this);
    this.proposeNewOwner = this.proposeNewOwner.bind(this);
    this.dropOwnershipProposal = this.dropOwnershipProposal.bind(this);
    this.claimOwnership = this.claimOwnership.bind(this);
  }

  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    newConfig
  }: {
    newConfig: UpdateConfigMsg;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        new_config: newConfig
      }
    }, fee, memo, _funds);
  };
  enableClaims = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      enable_claims: {}
    }, fee, memo, _funds);
  };
  initializePool = async ({
    incentivesShare,
    terraswapLpToken
  }: {
    incentivesShare: number;
    terraswapLpToken: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      initialize_pool: {
        incentives_share: incentivesShare,
        terraswap_lp_token: terraswapLpToken
      }
    }, fee, memo, _funds);
  };
  updatePool = async ({
    incentivesShare,
    terraswapLpToken
  }: {
    incentivesShare: number;
    terraswapLpToken: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_pool: {
        incentives_share: incentivesShare,
        terraswap_lp_token: terraswapLpToken
      }
    }, fee, memo, _funds);
  };
  withdrawFromLockup = async ({
    amount,
    duration,
    terraswapLpToken
  }: {
    amount: Uint128;
    duration: number;
    terraswapLpToken: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_from_lockup: {
        amount,
        duration,
        terraswap_lp_token: terraswapLpToken
      }
    }, fee, memo, _funds);
  };
  migrateLiquidity = async ({
    astroportPoolAddr,
    slippageTolerance,
    terraswapLpToken
  }: {
    astroportPoolAddr: string;
    slippageTolerance?: Decimal;
    terraswapLpToken: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      migrate_liquidity: {
        astroport_pool_addr: astroportPoolAddr,
        slippage_tolerance: slippageTolerance,
        terraswap_lp_token: terraswapLpToken
      }
    }, fee, memo, _funds);
  };
  stakeLpTokens = async ({
    terraswapLpToken
  }: {
    terraswapLpToken: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      stake_lp_tokens: {
        terraswap_lp_token: terraswapLpToken
      }
    }, fee, memo, _funds);
  };
  delegateAstroToAuction = async ({
    amount
  }: {
    amount: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      delegate_astro_to_auction: {
        amount
      }
    }, fee, memo, _funds);
  };
  claimRewardsAndOptionallyUnlock = async ({
    duration,
    terraswapLpToken,
    withdrawLpStake
  }: {
    duration: number;
    terraswapLpToken: string;
    withdrawLpStake: boolean;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_rewards_and_optionally_unlock: {
        duration,
        terraswap_lp_token: terraswapLpToken,
        withdraw_lp_stake: withdrawLpStake
      }
    }, fee, memo, _funds);
  };
  claimAssetReward = async ({
    duration,
    recipient,
    terraswapLpToken
  }: {
    duration: number;
    recipient?: string;
    terraswapLpToken: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_asset_reward: {
        duration,
        recipient,
        terraswap_lp_token: terraswapLpToken
      }
    }, fee, memo, _funds);
  };
  togglePoolRewards = async ({
    enable,
    terraswapLpToken
  }: {
    enable: boolean;
    terraswapLpToken: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      toggle_pool_rewards: {
        enable,
        terraswap_lp_token: terraswapLpToken
      }
    }, fee, memo, _funds);
  };
  callback = async (callbackMsg: CallbackMsg, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      callback: callbackMsg
    }, fee, memo, _funds);
  };
  proposeNewOwner = async ({
    expiresIn,
    owner
  }: {
    expiresIn: number;
    owner: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      propose_new_owner: {
        expires_in: expiresIn,
        owner
      }
    }, fee, memo, _funds);
  };
  dropOwnershipProposal = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      drop_ownership_proposal: {}
    }, fee, memo, _funds);
  };
  claimOwnership = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_ownership: {}
    }, fee, memo, _funds);
  };
}