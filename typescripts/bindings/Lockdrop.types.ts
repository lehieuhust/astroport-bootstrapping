/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Addr = string;
export type Uint128 = string;
export interface Config {
  astro_token?: Addr | null;
  auction_contract?: Addr | null;
  deposit_window: number;
  generator?: Addr | null;
  init_timestamp: number;
  lockdrop_incentives: Uint128;
  max_lock_duration: number;
  max_positions_per_user: number;
  min_lock_duration: number;
  owner: Addr;
  weekly_divider: number;
  weekly_multiplier: number;
  withdrawal_window: number;
  [k: string]: unknown;
}
export type Cw20HookMsg = {
  increase_lockup: {
    duration: number;
    [k: string]: unknown;
  };
} | {
  increase_astro_incentives: {
    [k: string]: unknown;
  };
};
export type ExecuteMsg = {
  receive: Cw20ReceiveMsg;
} | {
  update_config: {
    new_config: UpdateConfigMsg;
    [k: string]: unknown;
  };
} | {
  enable_claims: {
    [k: string]: unknown;
  };
} | {
  initialize_pool: {
    incentives_share: number;
    terraswap_lp_token: string;
    [k: string]: unknown;
  };
} | {
  update_pool: {
    incentives_share: number;
    terraswap_lp_token: string;
    [k: string]: unknown;
  };
} | {
  withdraw_from_lockup: {
    amount: Uint128;
    duration: number;
    terraswap_lp_token: string;
    [k: string]: unknown;
  };
} | {
  migrate_liquidity: {
    astroport_pool_addr: string;
    slippage_tolerance?: Decimal | null;
    terraswap_lp_token: string;
    [k: string]: unknown;
  };
} | {
  stake_lp_tokens: {
    terraswap_lp_token: string;
    [k: string]: unknown;
  };
} | {
  delegate_astro_to_auction: {
    amount: Uint128;
    [k: string]: unknown;
  };
} | {
  claim_rewards_and_optionally_unlock: {
    duration: number;
    terraswap_lp_token: string;
    withdraw_lp_stake: boolean;
    [k: string]: unknown;
  };
} | {
  claim_asset_reward: {
    duration: number;
    recipient?: string | null;
    terraswap_lp_token: string;
    [k: string]: unknown;
  };
} | {
  toggle_pool_rewards: {
    enable: boolean;
    terraswap_lp_token: string;
    [k: string]: unknown;
  };
} | {
  callback: CallbackMsg;
} | {
  propose_new_owner: {
    expires_in: number;
    owner: string;
    [k: string]: unknown;
  };
} | {
  drop_ownership_proposal: {
    [k: string]: unknown;
  };
} | {
  claim_ownership: {
    [k: string]: unknown;
  };
};
export type Binary = string;
export type Decimal = string;
export type CallbackMsg = {
  update_pool_on_dual_rewards_claim: {
    prev_astro_balance: Uint128;
    prev_proxy_reward_balances: Asset[];
    terraswap_lp_token: Addr;
    [k: string]: unknown;
  };
} | {
  withdraw_user_lockup_rewards_callback: {
    duration: number;
    terraswap_lp_token: Addr;
    user_address: Addr;
    withdraw_lp_stake: boolean;
    [k: string]: unknown;
  };
} | {
  withdraw_liquidity_from_terraswap_callback: {
    astroport_pool: Addr;
    prev_assets: [Asset, Asset];
    slippage_tolerance?: Decimal | null;
    terraswap_lp_token: Addr;
    [k: string]: unknown;
  };
} | {
  distribute_asset_reward: {
    lock_duration: number;
    previous_balance: Uint128;
    recipient: Addr;
    terraswap_lp_token: Addr;
    user_address: Addr;
    [k: string]: unknown;
  };
};
export type AssetInfo = {
  token: {
    contract_addr: Addr;
    [k: string]: unknown;
  };
} | {
  native_token: {
    denom: string;
    [k: string]: unknown;
  };
};
export interface Cw20ReceiveMsg {
  amount: Uint128;
  msg: Binary;
  sender: string;
  [k: string]: unknown;
}
export interface UpdateConfigMsg {
  astro_token_address?: string | null;
  auction_contract_address?: string | null;
  generator_address?: string | null;
  [k: string]: unknown;
}
export interface Asset {
  amount: Uint128;
  info: AssetInfo;
  [k: string]: unknown;
}
export interface InstantiateMsg {
  deposit_window: number;
  init_timestamp: number;
  max_lock_duration: number;
  max_positions_per_user: number;
  min_lock_duration: number;
  owner?: string | null;
  weekly_divider: number;
  weekly_multiplier: number;
  withdrawal_window: number;
  [k: string]: unknown;
}
export type RestrictedVectorForAssetInfoAndUint128 = [AssetInfo, Uint128][];
export interface LockUpInfoResponse {
  astro_rewards: Uint128;
  astroport_lp_token?: Addr | null;
  astroport_lp_transferred?: Uint128 | null;
  astroport_lp_units?: Uint128 | null;
  claimable_generator_astro_debt: Uint128;
  claimable_generator_proxy_debt: RestrictedVectorForAssetInfoAndUint128;
  duration: number;
  generator_astro_debt: Uint128;
  generator_proxy_debt: RestrictedVectorForAssetInfoAndUint128;
  lp_units_locked: Uint128;
  terraswap_lp_token: Addr;
  unlock_timestamp: number;
  withdrawal_flag: boolean;
  [k: string]: unknown;
}
export interface MigrateMsg {
  [k: string]: unknown;
}
export type RestrictedVectorForAssetInfoAndDecimal = [AssetInfo, Decimal][];
export type Uint256 = string;
export interface PoolInfo {
  generator_astro_per_share: Decimal;
  generator_proxy_per_share: RestrictedVectorForAssetInfoAndDecimal;
  has_asset_rewards: boolean;
  incentives_share: number;
  is_staked: boolean;
  migration_info?: MigrationInfo | null;
  terraswap_amount_in_lockups: Uint128;
  terraswap_pool: Addr;
  weighted_amount: Uint256;
  [k: string]: unknown;
}
export interface MigrationInfo {
  astroport_lp_token: Addr;
  terraswap_migrated_amount: Uint128;
  [k: string]: unknown;
}
export type QueryMsg = {
  config: {
    [k: string]: unknown;
  };
} | {
  state: {
    [k: string]: unknown;
  };
} | {
  pool: {
    terraswap_lp_token: string;
    [k: string]: unknown;
  };
} | {
  user_info: {
    address: string;
    [k: string]: unknown;
  };
} | {
  user_info_with_lockups_list: {
    address: string;
    [k: string]: unknown;
  };
} | {
  lock_up_info: {
    duration: number;
    terraswap_lp_token: string;
    user_address: string;
    [k: string]: unknown;
  };
} | {
  pending_asset_reward: {
    duration: number;
    terraswap_lp_token: string;
    user_address: string;
    [k: string]: unknown;
  };
};
export interface StateResponse {
  are_claims_allowed: boolean;
  supported_pairs_list: Addr[];
  total_astro_delegated: Uint128;
  total_incentives_share: number;
  [k: string]: unknown;
}
export interface UserInfoResponse {
  astro_transferred: boolean;
  claimable_generator_astro_debt: Uint128;
  delegated_astro_rewards: Uint128;
  lockup_infos: LockUpInfoResponse[];
  lockup_positions_index: number;
  total_astro_rewards: Uint128;
  [k: string]: unknown;
}