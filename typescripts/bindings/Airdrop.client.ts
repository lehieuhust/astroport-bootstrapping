/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { ClaimResponse, Addr, Config, ExecuteMsg, Uint128, Binary, Cw20ReceiveMsg, InstantiateMsg, MigrateMsg, QueryMsg, State } from "./Airdrop.types";
export interface AirdropReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  state: () => Promise<StateResponse>;
  userInfo: ({
    address
  }: {
    address: string;
  }) => Promise<UserInfoResponse>;
  hasUserClaimed: ({
    address
  }: {
    address: string;
  }) => Promise<HasUserClaimedResponse>;
}
export class AirdropQueryClient implements AirdropReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.state = this.state.bind(this);
    this.userInfo = this.userInfo.bind(this);
    this.hasUserClaimed = this.hasUserClaimed.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  state = async (): Promise<StateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      state: {}
    });
  };
  userInfo = async ({
    address
  }: {
    address: string;
  }): Promise<UserInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      user_info: {
        address
      }
    });
  };
  hasUserClaimed = async ({
    address
  }: {
    address: string;
  }): Promise<HasUserClaimedResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      has_user_claimed: {
        address
      }
    });
  };
}
export interface AirdropInterface extends AirdropReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    auctionContractAddress,
    fromTimestamp,
    merkleRoots,
    owner,
    toTimestamp
  }: {
    auctionContractAddress?: string;
    fromTimestamp?: number;
    merkleRoots?: string[];
    owner?: string;
    toTimestamp?: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  enableClaims: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claim: ({
    claimAmount,
    merkleProof,
    rootIndex
  }: {
    claimAmount: Uint128;
    merkleProof: string[];
    rootIndex: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  delegateAstroToBootstrapAuction: ({
    amountToDelegate
  }: {
    amountToDelegate: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdrawAirdropReward: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  transferUnclaimedTokens: ({
    amount,
    recipient
  }: {
    amount: Uint128;
    recipient: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class AirdropClient extends AirdropQueryClient implements AirdropInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.enableClaims = this.enableClaims.bind(this);
    this.claim = this.claim.bind(this);
    this.delegateAstroToBootstrapAuction = this.delegateAstroToBootstrapAuction.bind(this);
    this.withdrawAirdropReward = this.withdrawAirdropReward.bind(this);
    this.transferUnclaimedTokens = this.transferUnclaimedTokens.bind(this);
  }

  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    auctionContractAddress,
    fromTimestamp,
    merkleRoots,
    owner,
    toTimestamp
  }: {
    auctionContractAddress?: string;
    fromTimestamp?: number;
    merkleRoots?: string[];
    owner?: string;
    toTimestamp?: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        auction_contract_address: auctionContractAddress,
        from_timestamp: fromTimestamp,
        merkle_roots: merkleRoots,
        owner,
        to_timestamp: toTimestamp
      }
    }, fee, memo, _funds);
  };
  enableClaims = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      enable_claims: {}
    }, fee, memo, _funds);
  };
  claim = async ({
    claimAmount,
    merkleProof,
    rootIndex
  }: {
    claimAmount: Uint128;
    merkleProof: string[];
    rootIndex: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim: {
        claim_amount: claimAmount,
        merkle_proof: merkleProof,
        root_index: rootIndex
      }
    }, fee, memo, _funds);
  };
  delegateAstroToBootstrapAuction = async ({
    amountToDelegate
  }: {
    amountToDelegate: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      delegate_astro_to_bootstrap_auction: {
        amount_to_delegate: amountToDelegate
      }
    }, fee, memo, _funds);
  };
  withdrawAirdropReward = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_airdrop_reward: {}
    }, fee, memo, _funds);
  };
  transferUnclaimedTokens = async ({
    amount,
    recipient
  }: {
    amount: Uint128;
    recipient: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      transfer_unclaimed_tokens: {
        amount,
        recipient
      }
    }, fee, memo, _funds);
  };
}